// Permutation
//
// 1. Lexicographical permutations
// 2. Cyclic permutations
// 3. Random permutations

#include <algorithm>
#include <random>
#include <iostream>
#include <vector>

int main(int argc, char *argv[])
{
  // Lexicographical permutation
  {
    // std::vector<int> numbers = {1, 2, 3, 4, 5};
    //
    // do
    // {
    //   for (int n : numbers) std::cout << n << ' ';
    //   std::cout << '\n';
    // } while (std::next_permutation(begin(numbers), end(numbers)));
    //
    // // 5 4 1 2 3
    // // 5 4 1 3 2
    // // 5 4 2 1 3
    // // 5 4 2 3 1
    // // 5 4 3 1 2
    // // 5 4 3 2 1
    // // the following all permutations may be the result generated by next_permutation()
    // // don't forget the prev_permutation()
    //
    // return 0;
  }

  // Rotate permutation
  {
    // std::vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    //
    // // std::rotate(v.begin() + 2, v.begin() + 6, v.begin() + 9);
    // // std::rotate(v.begin() + 2, v.begin() + 6, v.begin()); // if the position before first point, that is not work
    //
    // auto first = v.begin() + 2;
    // auto last = v.begin() + 6;
    // auto pos = v.begin();
    //
    // if (pos < first) std::rotate(pos, first, last);
    // if (last < pos) std::rotate(first, last, pos);
    //
    // std::for_each(begin(v), end(v), [] (int v) { std::cout << v << ' ';});
  }

  // Random permutation
  {
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    std::random_device randomDevice;
    std::mt19937 generator(randomDevice());

    std::shuffle(begin(numbers), end(numbers), generator);
    for (int n : numbers) std::cout << n << ' ';
  }

  return 0;
}
