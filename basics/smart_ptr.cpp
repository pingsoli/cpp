///////////////////////////////////////////////////////////////////////////////
//
// Smart Pointer
//
// std::shared_ptr, std::unique_ptr
//
///////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
//
// smart pointer also support polymorphism

struct Base {
  virtual void foo() { std::cout << "Base::foo()\n"; }
};

struct Derived : public Base {
  virtual void foo() { std::cout << "Derived::foo()\n"; }
};

///////////////////////////////////////////////////////////////////////////////

int main(int argc, char** argv)
{

  /////////////////////////////////////////////////////////////////////////////
  //
  std::shared_ptr<Base> pb(new Base);
  std::shared_ptr<Base> pd(new Derived);

  pb->foo(); // Base::foo()
  pd->foo(); // Derived::foo()

  /////////////////////////////////////////////////////////////////////////////

  return 0;
}
